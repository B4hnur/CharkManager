name: Android Build

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Manual trigger

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: gradle
    
    - name: Create Minimal Android Project
      run: |
        mkdir -p app/src/main/java/com/wheel/carx
        mkdir -p app/src/main/res/layout
        mkdir -p app/src/main/res/values
        
        # Create AndroidManifest.xml
        echo '<?xml version="1.0" encoding="utf-8"?>
        <manifest xmlns:android="http://schemas.android.com/apk/res/android"
            package="com.wheel.carx">
            <application
                android:allowBackup="true"
                android:icon="@android:drawable/sym_def_app_icon"
                android:label="ÇARX"
                android:theme="@android:style/Theme.Material.Light">
                <activity
                    android:name=".MainActivity"
                    android:exported="true">
                    <intent-filter>
                        <action android:name="android.intent.action.MAIN" />
                        <category android:name="android.intent.category.LAUNCHER" />
                    </intent-filter>
                </activity>
            </application>
        </manifest>' > app/src/main/AndroidManifest.xml
        
        # Create MainActivity.kt
        echo 'package com.wheel.carx
        
        import android.app.Activity
        import android.os.Bundle
        
        class MainActivity : Activity() {
            override fun onCreate(savedInstanceState: Bundle?) {
                super.onCreate(savedInstanceState)
                setContentView(R.layout.activity_main)
            }
        }' > app/src/main/java/com/wheel/carx/MainActivity.kt
        
        # Create layout
        echo '<?xml version="1.0" encoding="utf-8"?>
        <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:orientation="vertical"
            android:gravity="center">
            
            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="ÇARX Proqramı"
                android:textSize="24sp"/>
                
        </LinearLayout>' > app/src/main/res/layout/activity_main.xml
        
        # Create strings.xml
        echo '<?xml version="1.0" encoding="utf-8"?>
        <resources>
            <string name="app_name">ÇARX</string>
        </resources>' > app/src/main/res/values/strings.xml
        
        # Create build.gradle files
        echo 'plugins {
            id "com.android.application"
            id "org.jetbrains.kotlin.android"
        }
        
        android {
            compileSdkVersion 32
            
            defaultConfig {
                applicationId "com.wheel.carx"
                minSdkVersion 21
                targetSdkVersion 32
                versionCode 1
                versionName "1.0"
            }
            
            buildTypes {
                release {
                    minifyEnabled false
                    proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"
                }
            }
            
            compileOptions {
                sourceCompatibility JavaVersion.VERSION_1_8
                targetCompatibility JavaVersion.VERSION_1_8
            }
            
            kotlinOptions {
                jvmTarget = "1.8"
            }
        }
        
        dependencies {
            implementation "androidx.core:core-ktx:1.7.0"
            implementation "androidx.appcompat:appcompat:1.4.1"
            implementation "com.google.android.material:material:1.5.0"
        }' > app/build.gradle
        
        echo 'buildscript {
            repositories {
                google()
                mavenCentral()
            }
            dependencies {
                classpath "com.android.tools.build:gradle:7.1.2"
                classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.6.10"
            }
        }
        
        allprojects {
            repositories {
                google()
                mavenCentral()
            }
        }
        
        task clean(type: Delete) {
            delete rootProject.buildDir
        }' > build.gradle
        
        echo 'include ":app"' > settings.gradle
        
        # Create gradle-wrapper properties
        mkdir -p gradle/wrapper
        echo 'distributionBase=GRADLE_USER_HOME
        distributionPath=wrapper/dists
        distributionUrl=https\://services.gradle.org/distributions/gradle-7.2-bin.zip
        zipStoreBase=GRADLE_USER_HOME
        zipStorePath=wrapper/dists' > gradle/wrapper/gradle-wrapper.properties
        
        # Download gradle-wrapper.jar
        curl -o gradle/wrapper/gradle-wrapper.jar https://github.com/gradle/gradle/raw/master/gradle/wrapper/gradle-wrapper.jar
        
        # Create gradle wrapper scripts
        echo '#!/usr/bin/env sh
        
        exec "$(dirname "$0")/_gradlew" "$@"' > gradlew
        chmod +x gradlew
        
        echo '#!/usr/bin/env sh
        
        APP_HOME="$(cd "$(dirname "$0")" >/dev/null 2>&1 && pwd)"
        APP_BASE_NAME=${0##*/}
        
        DEFAULT_JVM_OPTS=""
        
        MAX_FD="maximum"
        
        warn () {
            echo "$*"
        }
        
        die () {
            echo
            echo "$*"
            echo
            exit 1
        }
        
        # Main function
        case "$(uname)" in
            CYGWIN* | MINGW* | MSYS* )
                APP_HOME=$(cygpath --path --mixed "$APP_HOME")
                CLASSPATH=$( cygpath --path --mixed "$APP_HOME/gradle/wrapper/gradle-wrapper.jar" )
                
                # Use Windows path separator
                JAVACMD="java.exe"
                ;;
            * )
                CLASSPATH="$APP_HOME/gradle/wrapper/gradle-wrapper.jar"
                ;;
        esac
        
        # Determine java command
        if [ -n "$JAVA_HOME" ] ; then
            if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
                JAVACMD="$JAVA_HOME/jre/sh/java"
            else
                JAVACMD="$JAVA_HOME/bin/java"
            fi
            if [ ! -x "$JAVACMD" ] ; then
                die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME

        Please set the JAVA_HOME variable in your environment to match the
        location of your Java installation."
            fi
        else
            JAVACMD="java"
            which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.

        Please set the JAVA_HOME variable in your environment to match the
        location of your Java installation."
        fi
        
        # Execute Gradle
        exec "$JAVACMD" "$DEFAULT_JVM_OPTS" "-Dorg.gradle.appname=$APP_BASE_NAME" -classpath "$CLASSPATH" org.gradle.wrapper.GradleWrapperMain "$@"' > _gradlew
        chmod +x _gradlew
        
        # Create gradle.bat for Windows
        echo '@rem
        @rem Gradle startup script for Windows
        @rem
        @if "%DEBUG%" == "" @echo off
        @rem Set local scope for the variables with windows NT shell
        if "%OS%"=="Windows_NT" setlocal
        
        set DIRNAME=%~dp0
        if "%DIRNAME%" == "" set DIRNAME=.
        set APP_BASE_NAME=%~n0
        set APP_HOME=%DIRNAME%
        
        @rem Add default JVM options here.
        set DEFAULT_JVM_OPTS=
        
        @rem Find java.exe
        if defined JAVA_HOME goto findJavaFromJavaHome
        
        set JAVA_EXE=java.exe
        %JAVA_EXE% -version >NUL 2>&1
        if "%ERRORLEVEL%" == "0" goto init
        
        echo.
        echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
        echo.
        echo Please set the JAVA_HOME variable in your environment to match the
        echo location of your Java installation.
        
        goto fail
        
        :findJavaFromJavaHome
        set JAVA_HOME=%JAVA_HOME:"=%
        set JAVA_EXE=%JAVA_HOME%/bin/java.exe
        
        if exist "%JAVA_EXE%" goto init
        
        echo.
        echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
        echo.
        echo Please set the JAVA_HOME variable in your environment to match the
        echo location of your Java installation.
        
        goto fail
        
        :init
        @rem Get command-line arguments, handling Windows variants
        
        if not "%OS%" == "Windows_NT" goto win9xME_args
        
        :win9xME_args
        @rem Slurp the command line arguments.
        set CMD_LINE_ARGS=
        set _SKIP=2
        
        :win9xME_args_slurp
        if "x%~1" == "x" goto execute
        
        set CMD_LINE_ARGS=%*
        
        :execute
        @rem Setup the command line
        
        set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar
        
        @rem Execute Gradle
        "%JAVA_EXE%" %DEFAULT_JVM_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%
        
        :end
        @rem End local scope for the variables with windows NT shell
        if "%ERRORLEVEL%"=="0" goto mainEnd
        
        :fail
        rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
        rem the _cmd.exe /c_ return code!
        if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
        exit /b 1
        
        :mainEnd
        if "%OS%"=="Windows_NT" endlocal
        
        :omega' > gradlew.bat
        
    - name: List Project Structure
      run: find . -type f | sort
      
    - name: Grant execute permission for gradlew
      run: chmod +x ./gradlew
      
    - name: Build with Gradle
      run: ./gradlew assembleDebug
      
    - name: Upload APK
      uses: actions/upload-artifact@v3
      with:
        name: carx-app-debug
        path: app/build/outputs/apk/debug/*.apk
